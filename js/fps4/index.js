// Generated by CoffeeScript 1.7.1
(function() {
  var Camera, Map, Matrix, cam, frame, map;

  Camera = (function() {
    function Camera(w, h, fov, x, y, z, tx, ty, tz) {
      var _ref;
      this.canvases = document.getElementsByTagName('canvas');
      this.canvas = this.canvases[0];
      this.canvas.height = h;
      this.canvas.width = w;
      this.canvas.style.height = h + 'px';
      this.canvas.style.width = w + 'px';
      this.ctx = this.canvas.getContext('2d');
      _ref = {
        w: w,
        h: h,
        fov: fov,
        x: x,
        y: y,
        z: z,
        tx: tx,
        ty: ty,
        tz: tz
      }, this.w = _ref.w, this.h = _ref.h, this.fov = _ref.fov, this.x = _ref.x, this.y = _ref.y, this.z = _ref.z, this.tx = _ref.tx, this.ty = _ref.ty, this.tz = _ref.tz;
      this.origin = {
        x: this.w / 2,
        y: this.h / 2
      };
    }

    Camera.prototype.clear = function() {
      this.ctx.fillStyle = 'black';
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };

    Camera.prototype.trace = function(map) {
      var dpx, dpy, dx, dy, dz, iter, line, point, px, py, spoints, tx, ty, tz, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.ctx.fillStyle = 'white';
      this.ctx.strokeStyle = 'white';
      spoints = {};
      _ref = map.points;
      for (iter = _i = 0, _len = _ref.length; _i < _len; iter = ++_i) {
        point = _ref[iter];
        dx = point[0] - this.x;
        dy = point[1] - this.y;
        dz = point[2] - this.z;
        tx = Math.atan(dx / dz + this.tx);
        ty = Math.atan(dy / dz + this.ty);
        tz = this.tz;
        dpx = this.fov * this.h * tx;
        dpy = this.fov * this.h * ty;
        px = dpx + this.origin.x;
        py = this.origin.y - dpy;
        spoints[iter] = [px, py];
      }
      _ref1 = map.lines;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        line = _ref1[_j];
        this.ctx.beginPath();
        this.ctx.moveTo(spoints[line[0]][0], spoints[line[0]][1]);
        this.ctx.lineTo(spoints[line[1]][0], spoints[line[1]][1]);
        _results.push(this.ctx.stroke());
      }
      return _results;
    };

    return Camera;

  })();

  Map = (function() {
    function Map() {
      var file, json, obj;
      file = document.getElementById('map');
      json = file.innerText;
      obj = JSON.parse(json);
      this.points = obj.points;
      this.lines = obj.lines;
    }

    Map.prototype.applyMatrix = function(transMatrix) {
      var iter, origMatrix, point, resMatrix, _i, _len, _ref, _results;
      _ref = this.points;
      _results = [];
      for (iter = _i = 0, _len = _ref.length; _i < _len; iter = ++_i) {
        point = _ref[iter];
        origMatrix = new Matrix(1, 3, point);
        resMatrix = transMatrix.mul(origMatrix);
        _results.push(this.points[iter] = resMatrix.toArray()[0]);
      }
      return _results;
    };

    Map.prototype.apply4DMatrix = function(transMatrix) {
      var arrOut, iter, origMatrix, point, resMatrix, _i, _len, _ref, _results;
      _ref = this.points;
      _results = [];
      for (iter = _i = 0, _len = _ref.length; _i < _len; iter = ++_i) {
        point = _ref[iter];
        origMatrix = new Matrix(1, 4, [point[0], point[1], point[2], 1]);
        resMatrix = transMatrix.mul(origMatrix);
        arrOut = resMatrix.toArray()[0];
        _results.push(this.points[iter] = [arrOut[0], arrOut[1], arrOut[2]]);
      }
      return _results;
    };

    return Map;

  })();

  Matrix = (function() {
    function Matrix(w, h, els) {
      var _ref;
      _ref = {
        w: w,
        h: h,
        els: els
      }, this.w = _ref.w, this.h = _ref.h, this.els = _ref.els;
    }

    Matrix.prototype.get = function(c, r) {
      return this.els[r * this.w + c];
    };

    Matrix.prototype.mul = function(m2) {
      var intSum, lRow, n, rCol, resEls, _i, _j, _k, _ref, _ref1, _ref2;
      if (this.w !== m2.h) {
        throw new Error('Cannot multiply this matrix: ' + this.w + ' by ' + m2.h);
      }
      resEls = [];
      for (lRow = _i = 0, _ref = this.h - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; lRow = 0 <= _ref ? ++_i : --_i) {
        for (rCol = _j = 0, _ref1 = m2.w - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; rCol = 0 <= _ref1 ? ++_j : --_j) {
          intSum = 0;
          for (n = _k = 0, _ref2 = this.w - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; n = 0 <= _ref2 ? ++_k : --_k) {
            intSum += this.get(n, lRow) * m2.get(rCol, n);
          }
          resEls[rCol * m2.w + lRow] = intSum;
        }
      }
      return new Matrix(m2.w, this.h, resEls);
    };

    Matrix.prototype.toArray = function() {
      var arr, x, y, _i, _j, _ref, _ref1;
      arr = [];
      for (x = _i = 0, _ref = this.w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        arr[x] = [];
        for (y = _j = 0, _ref1 = this.h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          arr[x][y] = this.get(x, y);
        }
      }
      return arr;
    };

    return Matrix;

  })();

  Matrix.createRot = function(tx, ty, tz) {
    var cx, cy, cz, sx, sy, sz;
    sx = Math.sin(tx);
    sy = Math.sin(ty);
    sz = Math.sin(tz);
    cx = Math.cos(tx);
    cy = Math.cos(ty);
    cz = Math.cos(tz);
    return new Matrix(3, 3, [cz * cy, -sz * cy, sy, sy * sx * cz + cx * sz, -sy * sx * sz + cx * cz, -sx * cy, -sy * cx * cz + sx * sz, sy * cx * sz + cz * sx, cx * cy]);
  };

  Matrix.createTrans = function(dx, dy, dz) {
    return new Matrix(4, 4, [1, 0, 0, dx, 0, 1, 0, dy, 0, 0, 1, dz, 0, 0, 0, 1]);
  };

  cam = new Camera(window.innerWidth, window.innerHeight, Math.PI / 2, 5, 0.5, -7, 0, 0, 0);

  map = new Map;

  frame = function() {
    cam.clear();
    cam.trace(map);
    return window.requestAnimationFrame(frame);
  };

  frame();

  window.addEventListener('keydown', function(e) {
    var rotMatrix, transMatrix;
    switch (e.keyCode) {
      case 87:
      case 38:
        transMatrix = Matrix.createTrans(0, 0, -0.2);
        return map.apply4DMatrix(transMatrix);
      case 83:
      case 40:
        transMatrix = Matrix.createTrans(0, 0, 0.2);
        return map.apply4DMatrix(transMatrix);
      case 65:
        transMatrix = Matrix.createTrans(0.2, 0, 0);
        return map.apply4DMatrix(transMatrix);
      case 68:
        transMatrix = Matrix.createTrans(-0.2, 0, 0);
        return map.apply4DMatrix(transMatrix);
      case 37:
        rotMatrix = Matrix.createRot(0, 0.2, 0);
        return map.applyMatrix(rotMatrix);
      case 39:
        rotMatrix = Matrix.createRot(0, -0.2, 0);
        return map.applyMatrix(rotMatrix);
    }
  });

}).call(this);
