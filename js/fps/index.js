// Generated by CoffeeScript 1.7.1
(function() {
  var Camera, Map, cam, frame, map;

  Camera = (function() {
    function Camera(w, h, fov, x, y, z, tx, ty, tz) {
      var _ref;
      this.canvases = document.getElementsByTagName('canvas');
      this.canvas = this.canvases[0];
      this.canvas.height = h;
      this.canvas.width = w;
      this.canvas.style.height = h + 'px';
      this.canvas.style.width = w + 'px';
      this.ctx = this.canvas.getContext('2d');
      _ref = {
        w: w,
        h: h,
        fov: fov,
        x: x,
        y: y,
        z: z,
        tx: tx,
        ty: ty,
        tz: tz
      }, this.w = _ref.w, this.h = _ref.h, this.fov = _ref.fov, this.x = _ref.x, this.y = _ref.y, this.z = _ref.z, this.tx = _ref.tx, this.ty = _ref.ty, this.tz = _ref.tz;
      this.origin = {
        x: this.w / 2,
        y: this.h / 2
      };
    }

    Camera.prototype.clear = function() {
      this.ctx.fillStyle = 'black';
      return this.ctx.clearRect(0, 0, this.w, this.h);
    };

    Camera.prototype.trace = function(map, res, maxdepth) {
      var depth, dx, dy, dz, newx, newy, newz, style, tx, ty, voxel, x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.h; res > 0 ? _i <= _ref : _i >= _ref; y = _i += res) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.w; res > 0 ? _j <= _ref1 : _j >= _ref1; x = _j += res) {
            tx = this.tx + (this.fov / this.w) * (x - this.origin.x);
            ty = this.ty + (this.fov / this.h) * (this.origin.y - y);
            depth = 1;
            _results1.push((function() {
              var _results2;
              _results2 = [];
              while (depth < maxdepth) {
                dz = Math.floor(depth);
                dx = Math.floor(depth * Math.sin(tx));
                dy = Math.floor(depth * Math.sin(ty));
                newx = this.x + dx;
                newy = this.y + dy;
                newz = this.z + dz;
                if (0 > newx || map.x <= newx || 0 > newy || map.y <= newy || 0 > newz || map.z <= newz) {
                  depth++;
                  continue;
                }
                voxel = map.get(newx, newy, newz);
                if (0 === voxel.r && 0 === voxel.g && 0 === voxel.b) {
                  depth++;
                  continue;
                }
                style = 'rgb(' + voxel.r + ',' + voxel.g + ',' + voxel.b + ')';
                this.ctx.fillStyle = style;
                this.ctx.fillRect(x, y, res, res);
                break;
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Camera;

  })();

  Map = (function() {
    function Map(x, y, z) {
      var _ref;
      this.grid = [];
      _ref = {
        x: x,
        y: y,
        z: z
      }, this.x = _ref.x, this.y = _ref.y, this.z = _ref.z;
    }

    Map.prototype.get = function(x, y, z) {
      var res;
      if (x < 0 || x >= this.x || y < 0 || y >= this.y || z < 0 || z >= this.z) {
        return {
          r: 0,
          g: 0,
          b: 0
        };
      }
      x = Math.floor(x);
      y = Math.floor(y);
      z = Math.floor(z);
      res = this.grid[x][y][z];
      return {
        r: res[0],
        g: res[1],
        b: res[2]
      };
    };

    Map.prototype.random = function() {
      var x, y, z, _i, _ref, _results;
      this.grid = [];
      _results = [];
      for (x = _i = 0, _ref = this.x - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.grid[x] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.y - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            this.grid[x][y] = [];
            _results1.push((function() {
              var _k, _ref2, _results2;
              _results2 = [];
              for (z = _k = 0, _ref2 = this.z - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; z = 0 <= _ref2 ? ++_k : --_k) {
                _results2.push(this.grid[x][y][z] = [Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255)]);
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Map;

  })();

  cam = new Camera(window.innerWidth, window.innerHeight, Math.PI / 2, -10, 5, -10, 0, 0, 0);

  cam.clear();

  map = new Map(10, 10, 10);

  map.random();

  frame = function() {
    cam.clear();
    cam.tx += 0.05;
    cam.trace(map, 10, 15);
    return window.requestAnimationFrame(frame);
  };

  frame();

}).call(this);
