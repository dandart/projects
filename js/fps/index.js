// Generated by CoffeeScript 1.7.1
(function() {
  var Camera, Map, cam, map;

  Camera = (function() {
    function Camera(w, h, fov, x, y, z, tx, ty, tz) {
      var _ref;
      this.canvases = document.getElementsByTagName('canvas');
      this.canvas = this.canvases[0];
      this.ctx = this.canvas.getContext('2d');
      _ref = {
        w: w,
        h: h,
        fov: fov,
        x: x,
        y: y,
        z: z,
        tx: tx,
        ty: ty,
        tz: tz
      }, this.w = _ref.w, this.h = _ref.h, this.fov = _ref.fov, this.x = _ref.x, this.y = _ref.y, this.z = _ref.z, this.tx = _ref.tx, this.ty = _ref.ty, this.tz = _ref.tz;
      this.origin = {
        x: this.w / 2,
        y: this.h / 2
      };
    }

    Camera.prototype.clear = function() {
      this.ctx.fillStyle = 'black';
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };

    Camera.prototype.trace = function(map, res) {
      var depth, dx, dy, dz, tx, ty, voxel, x, y, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = this.w; res > 0 ? _i <= _ref : _i >= _ref; x = _i += res) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.h; res > 0 ? _j <= _ref1 : _j >= _ref1; y = _j += res) {
            tx = this.tx + (this.fov / this.w) * (x - this.origin.x);
            ty = this.ty + (this.fov / this.h) * (this.origin.y - y);
            this.ctx.fillStyle = 'white';
            depth = 1;
            _results1.push((function() {
              var _results2;
              _results2 = [];
              while (depth < 10) {
                dz = Math.floor(depth);
                dx = Math.floor(depth * Math.sin(tx));
                dy = Math.floor(depth * Math.sin(ty));
                if (0 > this.x + dx || map.x < this.x + dx || 0 > this.y + dy || map.y < this.y + dy || 0 > this.z + dz || map.z < this.z + dz) {
                  break;
                }
                voxel = map.get(this.x + dx, this.y + dy, this.z + dz);
                if (0 < voxel.r || 0 < voxel.g || 0 < voxel.b) {
                  this.ctx.fillStyle = 'rgb(' + voxel.r + ',' + voxel.g + ',' + voxel.b + ')';
                  this.ctx.fillRect(x, y, res, res);
                  break;
                }
                _results2.push(depth++);
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Camera;

  })();

  Map = (function() {
    function Map(x, y, z) {
      var _ref;
      this.grid = [];
      _ref = {
        x: x,
        y: y,
        z: z
      }, this.x = _ref.x, this.y = _ref.y, this.z = _ref.z;
    }

    Map.prototype.get = function(x, y, z) {
      var res;
      if (x < 0 || x >= this.x || y < 0 || y >= this.y || z < 0 || z >= this.z) {
        return {
          r: 0,
          g: 0,
          b: 0
        };
      }
      res = this.grid[z][y][x];
      return {
        r: res[0],
        g: res[1],
        b: res[2]
      };
    };

    Map.prototype.random = function() {
      var x, y, z, _i, _results;
      this.grid = [];
      _results = [];
      for (x = _i = 0; _i <= 2; x = ++_i) {
        this.grid[x] = [];
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (y = _j = 0; _j <= 2; y = ++_j) {
            this.grid[x][y] = [];
            _results1.push((function() {
              var _k, _results2;
              _results2 = [];
              for (z = _k = 0; _k <= 2; z = ++_k) {
                this.grid[x][y][z] = [];
                this.grid[x][y][z][0] = Math.floor(Math.random() * 255);
                this.grid[x][y][z][1] = Math.floor(Math.random() * 255);
                _results2.push(this.grid[x][y][z][2] = Math.floor(Math.random() * 255));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Map;

  })();

  cam = new Camera(window.innerWidth, window.innerHeight, Math.PI / 2, 1, 1, -1, Math.PI / 6, Math.PI / 6, Math.PI / 6);

  cam.clear();

  map = new Map(3, 3, 3);

  map.random();

  cam.trace(map, 5);

}).call(this);
